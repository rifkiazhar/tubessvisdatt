# -*- coding: utf-8 -*-
"""Tubes_1301184035.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MqU0S2y7VUMeqfFlIvHfKiUMHiIHqcaR
"""
#MUHAMMAD RIFKI AZHARI

#Data handing
import pandas as pd
import numpy as np

#Bokeh libraries
#from bokeh.io import curdoc
from bokeh.io import curdoc
from bokeh.plotting import figure, show
from bokeh.models import HoverTool, ColumnDataSource, Select
from bokeh.models import CategoricalColorMapper
from bokeh.palettes import Spectral6
from bokeh.layouts import WidgetBox, row, column
from bokeh.models import Slider, Select
from bokeh.models.widgets import Tabs, Panel, CheckboxGroup

dataset = pd.read_csv('covid_19_indonesia_time_series_all.csv') #https://www.kaggle.com/hendratno/covid19-indonesia

dataset.head()

#jumlah baris dan kolom dataset
dataset.shape

dataset = dataset [['Date', 'Location', 'New Cases', 'Total Cases', 'Total Deaths', 'Total Recovered']]
dataset['Date'] = pd.to_datetime(dataset['Date'])
dataset

#membuat location agar tidak sama
region = list(dataset.Location.unique())

#List dari setiap kolom
col_list = list(dataset.columns)


def create_data(region,cases):
  x_list = []
  y_list = []
  colors = []
  labels = []

  for i, region in enumerate(region):
    df = dataset[dataset['Location'] == region].reset_index(drop= True)

    x = list(df['Date'])
    y = list(df[cases])

    x_list.append(list(x))
    y_list.append(list(y))

    colors.append(Spectral6)
    labels.append(region)

    indonesia_case = ColumnDataSource(dataset= {'x':x_list, 'y':y_list, 'color':colors, 'label':labels})

    return indonesia_case

#membuat fig : plot
  fig = figure(x_axis_type='datetime',
               plot_width=900, plot_height=450,
               title = 'Visualization Covid19 in Indonesian',
               x_axis_label= 'Date', y_axis_label= 'Total Kasus')

  fig.line(x='x', y='y', color='color', source = indonesia_case, line_width = 3, line_alpha = 0.6)

  #definisikan legend 
  fig.legend.location = 'top_left'
  
  #definisikan tooltips
  tooltips = [
                     ('Date', '@date{%F}'),
                     ('New Cases', '@new cases'),
                     ('Total Cases', '@total cases'),
                     ('Total Deaths', '@total_deaths'),
                     ('Total Recovered', '@total_recovered')
                    ]

  fig.add_tools(HoverTool(tooltips=tooltips, formatters= {'@date' : 'datetime'}))

#update kota
def update_region(attr, old, new):
  region_plot = [region_selection.labels[i] for i in region_selection.active]

  new_source = create_data(region_plot,case_select.value)
  source.dataset.update(new_source.dataset)

def update_fitur(attr, old, new):
   region_plot = [region_selection.labels[i] for i in region_selection.active]
  
   case = case_select.value

   source = create_data(region_plot, case)

   source.data.update(new_source.data)

region_selection = CheckboxGroup(labels=region)
region_selection.on_change('active', update_region)

case_select = Select(options = col_list[2:], value='Total Cases', title='Cases')
case_select.on_change('value',update_fitur)


layout=row(WidgetBox(region_selection,case_select))
curdoc().add_root(layout)
